/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/path-browserify/index.js
var require_path_browserify = __commonJS({
  "node_modules/path-browserify/index.js"(exports, module2) {
    "use strict";
    function assertPath(path2) {
      if (typeof path2 !== "string") {
        throw new TypeError("Path must be a string. Received " + JSON.stringify(path2));
      }
    }
    function normalizeStringPosix(path2, allowAboveRoot) {
      var res = "";
      var lastSegmentLength = 0;
      var lastSlash = -1;
      var dots = 0;
      var code;
      for (var i = 0; i <= path2.length; ++i) {
        if (i < path2.length)
          code = path2.charCodeAt(i);
        else if (code === 47)
          break;
        else
          code = 47;
        if (code === 47) {
          if (lastSlash === i - 1 || dots === 1) {
          } else if (lastSlash !== i - 1 && dots === 2) {
            if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
              if (res.length > 2) {
                var lastSlashIndex = res.lastIndexOf("/");
                if (lastSlashIndex !== res.length - 1) {
                  if (lastSlashIndex === -1) {
                    res = "";
                    lastSegmentLength = 0;
                  } else {
                    res = res.slice(0, lastSlashIndex);
                    lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                  }
                  lastSlash = i;
                  dots = 0;
                  continue;
                }
              } else if (res.length === 2 || res.length === 1) {
                res = "";
                lastSegmentLength = 0;
                lastSlash = i;
                dots = 0;
                continue;
              }
            }
            if (allowAboveRoot) {
              if (res.length > 0)
                res += "/..";
              else
                res = "..";
              lastSegmentLength = 2;
            }
          } else {
            if (res.length > 0)
              res += "/" + path2.slice(lastSlash + 1, i);
            else
              res = path2.slice(lastSlash + 1, i);
            lastSegmentLength = i - lastSlash - 1;
          }
          lastSlash = i;
          dots = 0;
        } else if (code === 46 && dots !== -1) {
          ++dots;
        } else {
          dots = -1;
        }
      }
      return res;
    }
    function _format(sep2, pathObject) {
      var dir = pathObject.dir || pathObject.root;
      var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
      if (!dir) {
        return base;
      }
      if (dir === pathObject.root) {
        return dir + base;
      }
      return dir + sep2 + base;
    }
    var posix = {
      // path.resolve([from ...], to)
      resolve: function resolve2() {
        var resolvedPath = "";
        var resolvedAbsolute = false;
        var cwd;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path2;
          if (i >= 0)
            path2 = arguments[i];
          else {
            if (cwd === void 0)
              cwd = process.cwd();
            path2 = cwd;
          }
          assertPath(path2);
          if (path2.length === 0) {
            continue;
          }
          resolvedPath = path2 + "/" + resolvedPath;
          resolvedAbsolute = path2.charCodeAt(0) === 47;
        }
        resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
        if (resolvedAbsolute) {
          if (resolvedPath.length > 0)
            return "/" + resolvedPath;
          else
            return "/";
        } else if (resolvedPath.length > 0) {
          return resolvedPath;
        } else {
          return ".";
        }
      },
      normalize: function normalize(path2) {
        assertPath(path2);
        if (path2.length === 0)
          return ".";
        var isAbsolute = path2.charCodeAt(0) === 47;
        var trailingSeparator = path2.charCodeAt(path2.length - 1) === 47;
        path2 = normalizeStringPosix(path2, !isAbsolute);
        if (path2.length === 0 && !isAbsolute)
          path2 = ".";
        if (path2.length > 0 && trailingSeparator)
          path2 += "/";
        if (isAbsolute)
          return "/" + path2;
        return path2;
      },
      isAbsolute: function isAbsolute(path2) {
        assertPath(path2);
        return path2.length > 0 && path2.charCodeAt(0) === 47;
      },
      join: function join() {
        if (arguments.length === 0)
          return ".";
        var joined;
        for (var i = 0; i < arguments.length; ++i) {
          var arg = arguments[i];
          assertPath(arg);
          if (arg.length > 0) {
            if (joined === void 0)
              joined = arg;
            else
              joined += "/" + arg;
          }
        }
        if (joined === void 0)
          return ".";
        return posix.normalize(joined);
      },
      relative: function relative(from, to) {
        assertPath(from);
        assertPath(to);
        if (from === to)
          return "";
        from = posix.resolve(from);
        to = posix.resolve(to);
        if (from === to)
          return "";
        var fromStart = 1;
        for (; fromStart < from.length; ++fromStart) {
          if (from.charCodeAt(fromStart) !== 47)
            break;
        }
        var fromEnd = from.length;
        var fromLen = fromEnd - fromStart;
        var toStart = 1;
        for (; toStart < to.length; ++toStart) {
          if (to.charCodeAt(toStart) !== 47)
            break;
        }
        var toEnd = to.length;
        var toLen = toEnd - toStart;
        var length = fromLen < toLen ? fromLen : toLen;
        var lastCommonSep = -1;
        var i = 0;
        for (; i <= length; ++i) {
          if (i === length) {
            if (toLen > length) {
              if (to.charCodeAt(toStart + i) === 47) {
                return to.slice(toStart + i + 1);
              } else if (i === 0) {
                return to.slice(toStart + i);
              }
            } else if (fromLen > length) {
              if (from.charCodeAt(fromStart + i) === 47) {
                lastCommonSep = i;
              } else if (i === 0) {
                lastCommonSep = 0;
              }
            }
            break;
          }
          var fromCode = from.charCodeAt(fromStart + i);
          var toCode = to.charCodeAt(toStart + i);
          if (fromCode !== toCode)
            break;
          else if (fromCode === 47)
            lastCommonSep = i;
        }
        var out = "";
        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
          if (i === fromEnd || from.charCodeAt(i) === 47) {
            if (out.length === 0)
              out += "..";
            else
              out += "/..";
          }
        }
        if (out.length > 0)
          return out + to.slice(toStart + lastCommonSep);
        else {
          toStart += lastCommonSep;
          if (to.charCodeAt(toStart) === 47)
            ++toStart;
          return to.slice(toStart);
        }
      },
      _makeLong: function _makeLong(path2) {
        return path2;
      },
      dirname: function dirname(path2) {
        assertPath(path2);
        if (path2.length === 0)
          return ".";
        var code = path2.charCodeAt(0);
        var hasRoot = code === 47;
        var end = -1;
        var matchedSlash = true;
        for (var i = path2.length - 1; i >= 1; --i) {
          code = path2.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              end = i;
              break;
            }
          } else {
            matchedSlash = false;
          }
        }
        if (end === -1)
          return hasRoot ? "/" : ".";
        if (hasRoot && end === 1)
          return "//";
        return path2.slice(0, end);
      },
      basename: function basename(path2, ext) {
        if (ext !== void 0 && typeof ext !== "string")
          throw new TypeError('"ext" argument must be a string');
        assertPath(path2);
        var start = 0;
        var end = -1;
        var matchedSlash = true;
        var i;
        if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {
          if (ext.length === path2.length && ext === path2)
            return "";
          var extIdx = ext.length - 1;
          var firstNonSlashEnd = -1;
          for (i = path2.length - 1; i >= 0; --i) {
            var code = path2.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else {
              if (firstNonSlashEnd === -1) {
                matchedSlash = false;
                firstNonSlashEnd = i + 1;
              }
              if (extIdx >= 0) {
                if (code === ext.charCodeAt(extIdx)) {
                  if (--extIdx === -1) {
                    end = i;
                  }
                } else {
                  extIdx = -1;
                  end = firstNonSlashEnd;
                }
              }
            }
          }
          if (start === end)
            end = firstNonSlashEnd;
          else if (end === -1)
            end = path2.length;
          return path2.slice(start, end);
        } else {
          for (i = path2.length - 1; i >= 0; --i) {
            if (path2.charCodeAt(i) === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else if (end === -1) {
              matchedSlash = false;
              end = i + 1;
            }
          }
          if (end === -1)
            return "";
          return path2.slice(start, end);
        }
      },
      extname: function extname(path2) {
        assertPath(path2);
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var preDotState = 0;
        for (var i = path2.length - 1; i >= 0; --i) {
          var code = path2.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }
            continue;
          }
          if (end === -1) {
            matchedSlash = false;
            end = i + 1;
          }
          if (code === 46) {
            if (startDot === -1)
              startDot = i;
            else if (preDotState !== 1)
              preDotState = 1;
          } else if (startDot !== -1) {
            preDotState = -1;
          }
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
          return "";
        }
        return path2.slice(startDot, end);
      },
      format: function format(pathObject) {
        if (pathObject === null || typeof pathObject !== "object") {
          throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
        }
        return _format("/", pathObject);
      },
      parse: function parse(path2) {
        assertPath(path2);
        var ret = { root: "", dir: "", base: "", ext: "", name: "" };
        if (path2.length === 0)
          return ret;
        var code = path2.charCodeAt(0);
        var isAbsolute = code === 47;
        var start;
        if (isAbsolute) {
          ret.root = "/";
          start = 1;
        } else {
          start = 0;
        }
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var i = path2.length - 1;
        var preDotState = 0;
        for (; i >= start; --i) {
          code = path2.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }
            continue;
          }
          if (end === -1) {
            matchedSlash = false;
            end = i + 1;
          }
          if (code === 46) {
            if (startDot === -1)
              startDot = i;
            else if (preDotState !== 1)
              preDotState = 1;
          } else if (startDot !== -1) {
            preDotState = -1;
          }
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
          if (end !== -1) {
            if (startPart === 0 && isAbsolute)
              ret.base = ret.name = path2.slice(1, end);
            else
              ret.base = ret.name = path2.slice(startPart, end);
          }
        } else {
          if (startPart === 0 && isAbsolute) {
            ret.name = path2.slice(1, startDot);
            ret.base = path2.slice(1, end);
          } else {
            ret.name = path2.slice(startPart, startDot);
            ret.base = path2.slice(startPart, end);
          }
          ret.ext = path2.slice(startDot, end);
        }
        if (startPart > 0)
          ret.dir = path2.slice(0, startPart - 1);
        else if (isAbsolute)
          ret.dir = "/";
        return ret;
      },
      sep: "/",
      delimiter: ":",
      win32: null,
      posix: null
    };
    posix.posix = posix;
    module2.exports = posix;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ThControl
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/settings/settings.ts
var import_obsidian5 = require("obsidian");

// src/theme_utils.ts
var ThemeValues = class {
  constructor(internalContent, theme, color) {
    this.internalContent = internalContent;
    this.theme = theme;
    this.color = color;
  }
};
function getThemes() {
  return ["None", ...Object.keys(this.app.customCss.themes), ...this.app.customCss.oldThemes];
}

// src/components/modals.ts
var import_obsidian4 = require("obsidian");

// src/settings/suggesters/folderSuggester.ts
var import_obsidian = require("obsidian");
var FolderSuggester = class extends import_obsidian.AbstractInputSuggest {
  constructor(app, textInputEl, root) {
    super(app, textInputEl);
    this.textInputEl = textInputEl;
    if (root)
      this.root = root;
  }
  getSuggestions(inputStr) {
    var _a;
    const fileAndFolders = this.app.vault.getAllLoadedFiles();
    const search = inputStr.toLocaleLowerCase();
    const root = (_a = this.root) == null ? void 0 : _a.toLocaleLowerCase();
    return fileAndFolders.filter((f) => {
      if (!(f instanceof import_obsidian.TFolder))
        return false;
      let path2 = f.path.toLocaleLowerCase();
      if (path2 === "/")
        return false;
      if (root) {
        if (!path2.startsWith(root))
          return false;
        path2 = path2.slice(root.length);
      }
      return path2.includes(search);
    });
  }
  renderSuggestion(value, el) {
    el.setText(this.extractFolderPath(value));
  }
  selectSuggestion(value) {
    this.textInputEl.value = this.extractFolderPath(value);
    this.textInputEl.trigger("input");
    this.close();
  }
  extractFolderPath(folder) {
    const path2 = folder.path;
    if (this.root)
      return path2.slice(this.root.length + 1);
    return path2;
  }
};

// src/settings/suggesters/tagSuggester.ts
var import_obsidian3 = require("obsidian");

// src/tagController.ts
var import_obsidian2 = require("obsidian");
var TagController = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
    this.settings = plugin.settings;
  }
  onFileOpen(file) {
    var _a;
    let frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (frontmatter === void 0)
      return false;
    let tags = frontmatter.tags;
    if (tags === void 0)
      return false;
    let bestMatch = null;
    for (let tag of tags) {
      for (let config of this.settings.tagThemesArr) {
        if (tag === config.internalContent) {
          bestMatch = {
            theme: config.theme,
            color: config.color
          };
          break;
        }
      }
      if (bestMatch)
        break;
    }
    if (bestMatch) {
      this.app.customCss.setTheme(bestMatch.theme);
      this.app.changeTheme(
        bestMatch.color ? "obsidian" : "moonstone"
      );
      return true;
    }
    return false;
  }
};
function getUniqueTags(currentCache) {
  let currentTags = [];
  const tags = (0, import_obsidian2.getAllTags)(currentCache);
  if (tags) {
    currentTags = tags;
  }
  currentTags = currentTags.map((tag) => tag.slice(1));
  currentTags = Array.from(new Set(currentTags));
  return currentTags;
}

// src/settings/suggesters/tagSuggester.ts
var TagSuggester = class extends import_obsidian3.AbstractInputSuggest {
  constructor(app, textInputEl) {
    super(app, textInputEl);
  }
  getSuggestions(inputStr) {
    const tagsCache = [];
    for (const tfile of this.app.vault.getMarkdownFiles()) {
      const cache = this.app.metadataCache.getFileCache(tfile);
      if (cache) {
        const currentTags = getUniqueTags(cache);
        for (const tag of currentTags) {
          if (!tagsCache.contains(tag)) {
            tagsCache.push(tag);
          }
        }
      }
    }
    const lowerInput = inputStr.toLowerCase();
    return tagsCache.filter((tag) => tag.toLowerCase().includes(lowerInput));
  }
  renderSuggestion(value, el) {
    el.setText(value);
  }
};

// src/components/modals.ts
var PathThemeModal = class extends import_obsidian4.Modal {
  constructor(app, plugin, value) {
    super(app);
    this.plugin = plugin;
    this.plugin.settings.pathFolderDummy = value.internalContent;
    this.plugin.settings.pathThemeDummy = value.theme;
    this.plugin.settings.pathColorDummy = value.color;
    this.renderInputs(value);
    this.renderButtons(value);
  }
  onOpen() {
    const { contentEl } = this;
  }
  onClose() {
    const { contentEl } = this;
    this.callback();
  }
  renderInputs(value) {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Modify the saved content" });
    const path2 = new import_obsidian4.Setting(contentEl).setName("Path");
    path2.addText((text) => {
      text.setValue(value.internalContent);
      text.onChange(async (text2) => {
        this.plugin.settings.pathFolderDummy = text2;
        await this.plugin.saveSettings();
      });
      new FolderSuggester(this.app, text.inputEl);
    });
    const theme = new import_obsidian4.Setting(contentEl).setName("Theme");
    let themes = getThemes();
    theme.addDropdown((dropDown) => {
      for (let theme2 of themes) {
        dropDown.addOption(theme2, theme2);
      }
      dropDown.setValue(value.theme);
      dropDown.onChange(async (value2) => {
        this.plugin.settings.pathThemeDummy = value2;
        await this.plugin.saveSettings();
      });
    });
    const color = new import_obsidian4.Setting(contentEl).setName("Color");
    color.addDropdown(
      (dropDown) => dropDown.addOption("light", "Light").addOption("dark", "Dark").setValue(value.color ? "dark" : "light").onChange(async (value2) => {
        this.plugin.settings.pathColorDummy = value2.toLowerCase() === "dark" ? true : false;
        await this.plugin.saveSettings();
      })
    );
  }
  renderButtons(value) {
    const { contentEl } = this;
    const buttons = new import_obsidian4.Setting(contentEl);
    buttons.addButton((button) => {
      button.setButtonText("Submit");
      button.setCta();
      button.onClick(async () => {
        if (this.plugin.settings.pathFolderDummy.replace(/\s/g, "") !== "" && this.plugin.settings.pathThemeDummy.replace(/\s/g, "") !== "") {
          this.plugin.settings.pathThemesArr.remove(value);
          this.plugin.settings.pathThemesArr.push(new ThemeValues(
            this.plugin.settings.pathFolderDummy,
            this.plugin.settings.pathThemeDummy,
            this.plugin.settings.pathColorDummy
          ));
          await this.plugin.saveSettings();
          new import_obsidian4.Notice("Added successfully");
          this.close();
        } else {
          new import_obsidian4.Notice("Please fill in both the path and the theme");
        }
      });
    });
    buttons.addButton((button) => {
      button.setButtonText("Cancel");
      button.setWarning();
      button.onClick(async () => {
        this.plugin.settings.pathFolderDummy, this.plugin.settings.pathThemeDummy = "";
        this.plugin.settings.pathColorDummy = false;
        await this.plugin.saveSettings();
        this.close();
      });
    });
  }
};
var TagThemeModal = class extends import_obsidian4.Modal {
  constructor(app, plugin, value) {
    super(app);
    this.plugin = plugin;
    this.plugin.settings.tagStrDummy = value.internalContent;
    this.plugin.settings.tagThemeDummy = value.theme;
    this.plugin.settings.tagColorDummy = value.color;
    this.renderInputs(value);
    this.renderButtons(value);
  }
  onOpen() {
    const { contentEl } = this;
  }
  onClose() {
    const { contentEl } = this;
    this.callback();
  }
  renderInputs(value) {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Modify the saved content" });
    const path2 = new import_obsidian4.Setting(contentEl).setName("Tag");
    path2.addText((text) => {
      text.setValue(value.internalContent);
      text.onChange(async (text2) => {
        this.plugin.settings.tagStrDummy = text2;
        await this.plugin.saveSettings();
      });
      new TagSuggester(this.app, text.inputEl);
    });
    const theme = new import_obsidian4.Setting(contentEl).setName("Theme");
    let themes = getThemes();
    theme.addDropdown((dropDown) => {
      for (let theme2 of themes) {
        dropDown.addOption(theme2, theme2);
      }
      dropDown.setValue(value.theme);
      dropDown.onChange(async (value2) => {
        this.plugin.settings.tagThemeDummy = value2;
        await this.plugin.saveSettings();
      });
    });
    const color = new import_obsidian4.Setting(contentEl).setName("Color");
    color.addDropdown(
      (dropDown) => dropDown.addOption("light", "Light").addOption("dark", "Dark").setValue(value.color ? "dark" : "light").onChange(async (value2) => {
        this.plugin.settings.tagColorDummy = value2.toLowerCase() === "dark" ? true : false;
        await this.plugin.saveSettings();
      })
    );
  }
  renderButtons(value) {
    const { contentEl } = this;
    const buttons = new import_obsidian4.Setting(contentEl);
    buttons.addButton((button) => {
      button.setButtonText("Submit");
      button.setCta();
      button.onClick(async () => {
        if (this.plugin.settings.tagStrDummy.replace(/\s/g, "") !== "" && this.plugin.settings.tagThemeDummy.replace(/\s/g, "") !== "") {
          this.plugin.settings.tagThemesArr.remove(value);
          this.plugin.settings.tagThemesArr.push(new ThemeValues(
            this.plugin.settings.tagStrDummy,
            this.plugin.settings.tagThemeDummy,
            this.plugin.settings.tagColorDummy
          ));
          await this.plugin.saveSettings();
          new import_obsidian4.Notice("Added successfully");
          this.close();
        } else {
          new import_obsidian4.Notice("Please fill in both the tag and the theme");
        }
      });
    });
    buttons.addButton((button) => {
      button.setButtonText("Cancel");
      button.setWarning();
      button.onClick(async () => {
        this.plugin.settings.tagStrDummy, this.plugin.settings.tagThemeDummy = "";
        this.plugin.settings.tagColorDummy = false;
        await this.plugin.saveSettings();
        this.close();
      });
    });
  }
};

// src/settings/settings.ts
var DEFAULT_SETTINGS = {
  enableColorStatusBarIcon: true,
  darkModeStringStatus: "\u{1F315}",
  lightModeStringStatus: "\u{1F506}",
  pathThemesArr: [new ThemeValues("ExampleFolder/InsideFolder/", "None", true)],
  pathFolderDummy: "",
  pathThemeDummy: "",
  pathColorDummy: true,
  tagThemesArr: [new ThemeValues("Example", "None", true)],
  tagStrDummy: "",
  tagThemeDummy: "",
  tagColorDummy: true,
  defaultTheme: " ",
  defaultColor: true,
  defaultEnabled: false
};
var ThControlSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.statusBarIcon(containerEl);
    this.pathControl(containerEl);
    this.renderPathThemeList(containerEl, this.plugin.settings);
    this.tagControl(containerEl);
    this.renderTagThemeList(containerEl, this.plugin.settings);
    this.defaultTheme(containerEl);
  }
  statusBarIcon(container) {
    new import_obsidian5.Setting(container).setName("Enable color switcher").setDesc("Enable/Disable an icon in your status bar to switch light/dark mode! Need to reload Obsidian or the plugin").addToggle(
      (toggle) => {
        toggle.setValue(this.plugin.settings.enableColorStatusBarIcon);
        toggle.onChange(async (value) => {
          this.plugin.settings.enableColorStatusBarIcon = value;
          await this.plugin.saveSettings();
          this.display();
        });
      }
    );
    new import_obsidian5.Setting(container).setName("Dark mode string status").setDesc("Set any text-emoji to display the dark status! Need to enable Color Status Bar Icon").addText((text) => {
      if (!this.plugin.settings.enableColorStatusBarIcon)
        text.setDisabled(true);
      text.setPlaceholder("\u{1F315}");
      text.setValue(this.plugin.settings.darkModeStringStatus);
      text.onChange(async (value) => {
        this.plugin.settings.darkModeStringStatus = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(container).setName("Light mode string status").setDesc("Set any text-emoji to display the light status! Need to enable Color Status Bar Icon").addText((text) => {
      if (!this.plugin.settings.enableColorStatusBarIcon)
        text.setDisabled(true);
      text.setPlaceholder("\u{1F506}");
      text.setValue(this.plugin.settings.lightModeStringStatus).onChange(async (value) => {
        this.plugin.settings.lightModeStringStatus = value;
        await this.plugin.saveSettings();
      });
    });
  }
  pathControl(container) {
    new import_obsidian5.Setting(container).setHeading().setName("Path-Specific themes").setDesc("This option has lower priority than the tag controller");
    let themes = getThemes();
    let settingAdd = new import_obsidian5.Setting(container).setName("Add a new path").setDesc("set the path, theme and color scheme, after that, select the add button");
    settingAdd.addText((text) => {
      text.setPlaceholder("ExampleFolder/InsideFolder/");
      text.onChange(async (value) => {
        this.plugin.settings.pathFolderDummy = value;
        await this.plugin.saveSettings();
      });
      new FolderSuggester(this.app, text.inputEl);
    });
    settingAdd.addDropdown((dropDown) => {
      for (let theme of themes) {
        dropDown.addOption(theme, theme);
      }
      dropDown.setValue(" ");
      dropDown.onChange(async (value) => {
        this.plugin.settings.pathThemeDummy = value;
        await this.plugin.saveSettings();
      });
    });
    settingAdd.addDropdown(
      (dropDown) => dropDown.addOption("Light", "Light").addOption("Dark", "Dark").setValue("Dark").onChange(async (value) => {
        this.plugin.settings.pathColorDummy = value.toLowerCase() === "dark" ? true : false;
        await this.plugin.saveSettings();
      })
    );
    settingAdd.addButton(
      (button) => button.setButtonText("Add").onClick(async () => {
        if (this.plugin.settings.pathFolderDummy.replace(/\s/g, "") !== "" && this.plugin.settings.pathThemeDummy.replace(/\s/g, "") !== "") {
          this.plugin.settings.pathThemesArr.push(new ThemeValues(
            this.plugin.settings.pathFolderDummy,
            this.plugin.settings.pathThemeDummy,
            this.plugin.settings.pathColorDummy
          ));
          new import_obsidian5.Notice("Added successfully");
          this.plugin.settings.pathFolderDummy, this.plugin.settings.pathThemeDummy = "";
          this.plugin.settings.pathColorDummy = true;
          await this.plugin.saveSettings();
          this.display();
        } else {
          new import_obsidian5.Notice("Please fill in all fields");
        }
      })
    );
  }
  renderPathThemeList(element, settings) {
    const list = element.createEl("ul", { cls: "thcontrol-theme-list", attr: { "data-index": -1 } });
    settings.pathThemesArr.forEach((value) => {
      const groupItem = list.createEl("li", {
        cls: ["thcontrol-li-list"]
      });
      this.renderElementPathTheme(groupItem, value);
    });
  }
  renderElementPathTheme(element, value) {
    const listInfo = element.createDiv({ cls: "thcontrol-theme-info" });
    listInfo.createSpan({ text: value.internalContent, cls: "thcontrol-info-left" });
    listInfo.createSpan({ text: value.theme, cls: "thcontrol-info-center" });
    listInfo.createSpan({ text: value.color === true ? "Dark" : "Light", cls: "path-theme-info-center" });
    const buttonsDiv = listInfo.createDiv();
    let buttons = new import_obsidian5.Setting(buttonsDiv);
    buttons.addButton((button) => {
      button.setIcon("settings");
      button.onClick(async () => {
        let modal = new PathThemeModal(this.app, this.plugin, value);
        const newCallback = () => {
          this.display();
        };
        modal.callback = newCallback;
        modal.open();
      });
    });
    buttons.addButton((button) => {
      button.setIcon("trash-2");
      button.onClick(async () => {
        this.plugin.settings.pathThemesArr.remove(value);
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
  tagControl(container) {
    new import_obsidian5.Setting(container).setHeading().setName("Tag-Specific themes").setDesc("This option has more priority than the path controller");
    let themes = getThemes();
    let settingAdd = new import_obsidian5.Setting(container).setName("Add a new tag").setDesc("set the tag, theme and color scheme, after that, select the add button. No need to write `#` before the tag");
    settingAdd.addText((text) => {
      text.setPlaceholder("ExampleTag");
      text.onChange(async (value) => {
        this.plugin.settings.tagStrDummy = value;
        await this.plugin.saveSettings();
      });
      new TagSuggester(this.app, text.inputEl);
    });
    settingAdd.addDropdown((dropDown) => {
      for (let theme of themes) {
        dropDown.addOption(theme, theme);
      }
      dropDown.setValue(" ");
      dropDown.onChange(async (value) => {
        this.plugin.settings.tagThemeDummy = value;
        await this.plugin.saveSettings();
      });
    });
    settingAdd.addDropdown(
      (dropDown) => dropDown.addOption("Light", "Light").addOption("Dark", "Dark").setValue("Dark").onChange(async (value) => {
        this.plugin.settings.tagColorDummy = value.toLowerCase() === "dark" ? true : false;
        await this.plugin.saveSettings();
      })
    );
    settingAdd.addButton(
      (button) => button.setButtonText("Add").onClick(async () => {
        if (this.plugin.settings.tagStrDummy.replace(/\s/g, "") !== "" && this.plugin.settings.tagThemeDummy.replace(/\s/g, "") !== "") {
          this.plugin.settings.tagThemesArr.push(new ThemeValues(
            this.plugin.settings.tagStrDummy,
            this.plugin.settings.tagThemeDummy,
            this.plugin.settings.tagColorDummy
          ));
          new import_obsidian5.Notice("Added successfully");
          this.plugin.settings.tagStrDummy, this.plugin.settings.tagThemeDummy = "";
          this.plugin.settings.tagColorDummy = true;
          await this.plugin.saveSettings();
          this.display();
        } else {
          new import_obsidian5.Notice("Please fill in all fields");
        }
      })
    );
  }
  renderTagThemeList(element, settings) {
    const list = element.createEl("ul", { cls: "thcontrol-theme-list", attr: { "data-index": -1 } });
    settings.tagThemesArr.forEach((value) => {
      const groupItem = list.createEl("li", {
        cls: ["thcontrol-li-list"]
      });
      this.renderElementTagTheme(groupItem, value);
    });
  }
  renderElementTagTheme(element, value) {
    const listInfo = element.createDiv({ cls: "thcontrol-theme-info" });
    listInfo.createSpan({ text: value.internalContent, cls: "thcontrol-info-left" });
    listInfo.createSpan({ text: value.theme, cls: "thcontrol-info-center" });
    listInfo.createSpan({ text: value.color === true ? "Dark" : "Light", cls: "path-theme-info-center" });
    const buttonsDiv = listInfo.createDiv();
    let buttons = new import_obsidian5.Setting(buttonsDiv);
    buttons.addButton((button) => {
      button.setIcon("settings");
      button.onClick(async () => {
        let modal = new TagThemeModal(this.app, this.plugin, value);
        const newCallback = () => {
          this.display();
        };
        modal.callback = newCallback;
        modal.open();
      });
    });
    buttons.addButton((button) => {
      button.setIcon("trash-2");
      button.onClick(async () => {
        this.plugin.settings.tagThemesArr.remove(value);
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
  defaultTheme(container) {
    let setting = new import_obsidian5.Setting(container).setHeading().setName("Default theme").setDesc("Set a default theme when you don't have any saved theme config in path or tag");
    let themes = getThemes();
    setting.addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.defaultEnabled);
      toggle.onChange(async (value) => {
        this.plugin.settings.defaultEnabled = value;
        await this.plugin.saveSettings();
        this.display();
      });
    });
    setting.addDropdown((dropDown) => {
      if (!this.plugin.settings.defaultEnabled)
        dropDown.setDisabled(true);
      for (let theme of themes) {
        dropDown.addOption(theme, theme);
      }
      dropDown.setValue(this.plugin.settings.defaultTheme);
      dropDown.onChange(async (value) => {
        this.plugin.settings.defaultTheme = value;
        await this.plugin.saveSettings();
      });
    });
    setting.addDropdown((dropDown) => {
      if (!this.plugin.settings.defaultEnabled)
        dropDown.setDisabled(true);
      dropDown.addOption("Light", "Light");
      dropDown.addOption("Dark", "Dark");
      dropDown.setValue(this.plugin.settings.defaultColor === true ? "Dark" : "Light");
      dropDown.onChange(async (value) => {
        this.plugin.settings.defaultColor = value.toLowerCase() === "dark" ? true : false;
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/colorStatusBar.ts
var ColorStatusBar = class {
  constructor(plugin) {
    this.DARK_MODE_THEME_KEY = "obsidian";
    this.LIGHT_MODE_THEME_KEY = "moonstone";
    this.plugin = plugin;
    this.app = plugin.app;
    this.settings = plugin.settings;
    this.loadColorStatusIcon();
  }
  loadColorStatusIcon() {
    this.reloadColorStatus();
    const themePickerStatusBarItem = this.plugin.addStatusBarItem();
    if (!this.settings.enableColorStatusBarIcon)
      return;
    const changeThemeButton = themePickerStatusBarItem.createDiv({
      cls: "status-bar-item mod-clickable",
      text: this.currentColorStatus
    });
    changeThemeButton.addEventListener("click", () => {
      this.toggleColorScheme();
    });
    this.plugin.registerEvent(
      this.app.workspace.on("css-change", () => {
        this.reloadColorStatus();
        changeThemeButton.textContent = this.currentColorStatus;
      })
    );
  }
  reloadColorStatus() {
    if (this.settings.darkModeStringStatus.replace(/\s/g, "") === "") {
      this.settings.darkModeStringStatus = DEFAULT_SETTINGS.darkModeStringStatus;
    }
    if (this.settings.lightModeStringStatus.replace(/\s/g, "") === "") {
      this.settings.lightModeStringStatus = DEFAULT_SETTINGS.lightModeStringStatus;
    }
    this.currentColorStatus = this.isDarkMode() ? this.settings.lightModeStringStatus : this.settings.darkModeStringStatus;
  }
  isDarkMode() {
    return this.app.vault.getConfig("theme") === this.DARK_MODE_THEME_KEY;
  }
  toggleColorScheme() {
    let colorSchemeKey;
    if (this.isDarkMode()) {
      colorSchemeKey = this.LIGHT_MODE_THEME_KEY;
      this.currentColorStatus = this.settings.lightModeStringStatus;
    } else {
      colorSchemeKey = this.DARK_MODE_THEME_KEY;
      this.currentColorStatus = this.settings.darkModeStringStatus;
    }
    this.app.changeTheme(colorSchemeKey);
  }
};

// src/pathController.ts
var path = __toESM(require_path_browserify());
var PathController = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.app = plugin.app;
    this.settings = plugin.settings;
  }
  onFileOpen(file) {
    let bestMatch = null;
    let maxDepth = 0;
    for (let value of this.settings.pathThemesArr) {
      const depth = isPathInside(value.internalContent, file.path);
      if (depth > maxDepth) {
        maxDepth = depth;
        bestMatch = value;
      }
    }
    if (bestMatch) {
      this.app.customCss.setTheme(bestMatch.theme);
      this.app.changeTheme(
        bestMatch.color ? "obsidian" : "moonstone"
      );
      return true;
    }
    return false;
  }
};
function isPathInside(basePath, targetPath) {
  const normalizedBase = path.resolve(basePath);
  const normalizedTarget = path.resolve(targetPath);
  if (normalizedTarget.startsWith(normalizedBase + path.sep)) {
    const baseParts = normalizedBase.split(path.sep);
    const targetParts = normalizedTarget.split(path.sep);
    let depth = 0;
    for (let i = 0; i < baseParts.length; i++) {
      if (baseParts[i] === targetParts[i]) {
        depth++;
      } else {
        break;
      }
    }
    return depth;
  }
  return 0;
}

// src/main.ts
var ThControl = class extends import_obsidian6.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ThControlSettingTab(this.app, this));
    this.colorStatusBar = new ColorStatusBar(this);
    this.pathController = new PathController(this);
    this.tagController = new TagController(this);
    this.registerEvent(
      this.app.workspace.on("file-open", async (file) => {
        if (file === null)
          return;
        let path2 = this.pathController.onFileOpen(file);
        let tag = this.tagController.onFileOpen(file);
        if (!path2 && !tag)
          this.defaultThemeCheck();
      })
    );
  }
  defaultThemeCheck() {
    if (this.settings.defaultTheme.replace(/\s/g, "") !== "" && this.settings.defaultEnabled) {
      this.app.customCss.setTheme(this.settings.defaultTheme);
      this.app.changeTheme(
        this.settings.defaultColor ? "obsidian" : "moonstone"
      );
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};


/* nosourcemap */